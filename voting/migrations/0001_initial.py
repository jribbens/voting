# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-09-30 22:09
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid
import voting.fields
import voting.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.CharField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Election',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=254)),
                ('shortname', models.CharField(help_text='This is a unique short identifier for the vote. It will be used as the username part of the email address for voters to request their ballot key.', max_length=8, null=True, unique=True, validators=[voting.models._validate_shortname], verbose_name='Short name')),
                ('votetype', models.CharField(choices=[('Newsgroup', 'Newsgroup'), ('Charter Change', 'Charter Change'), ('Procedural', 'Procedural'), ('Combined', 'Combined')], help_text='This is just a helpful classification of what sort of election this is. Its value does not affect the operation of the election.', max_length=64, verbose_name='Vote type')),
                ('proposal', models.TextField(blank=True, help_text='This text is displayed to the voter when they are filling in their vote. It should match the rationale, summary of discussion, changes from the last RFD, and proposal, from the CFV.')),
                ('cfv_date', models.DateField(blank=True, db_index=True, help_text='Votes received before this date (or if this date is not provided) will not be accepted.', null=True, verbose_name='CFV date')),
                ('cfv_end_date', models.DateField(blank=True, help_text='Votes received after this date (or if this date is not provided) will not be accepted.', null=True, verbose_name='CFV end date')),
                ('cfv_msgid', voting.models.MessageIDField(blank=True, help_text='Fill this in with the Message-ID (including angle brackets) of the CFV once it appears.', max_length=250, verbose_name='CFV Message-ID')),
                ('cfv', models.TextField(editable=False, verbose_name='CFV')),
                ('result_date', models.DateField(blank=True, help_text='Fill this in with the date the results posting appears.', null=True)),
                ('result_msgid', voting.models.MessageIDField(blank=True, help_text='Fill this in with the Message-ID (including angle brackets) of the results posting once it appears.', max_length=250, verbose_name='Result Message-ID')),
                ('result', models.TextField(editable=False)),
                ('uk_vote', models.BooleanField(default=True, help_text='Un-tick this box if this election is not an official uk.* election whose CFV will be posted in uk.net.news.announce.', verbose_name='uk.* vote')),
                ('hidden', models.BooleanField(default=False, help_text='Tick this box to hide this vote completely from public pages (e.g. for testing).')),
                ('status', models.CharField(choices=[('setup', 'Setting up'), ('active', 'Voting in progress'), ('count', 'Counting in progress'), ('result', 'Result issued'), ('abandoned', 'Abandoned')], default='setup', help_text=" It is vital to keep this status up-to-date. If the election is not in the 'Voting in progress' status then votes will not be accepted.", max_length=10)),
                ('ballot_email', voting.fields.EmailListField(blank=True, help_text="If specified, this enables ballots-by-email. Ballot papers are automatically createed from the 'Proposal' field (which must contain the string $KEY$ for the voter's secret key). Completed votes are forwarded to all addresses in this comma-separated list.", max_length=254)),
            ],
            options={
                'ordering': ('-cfv_date',),
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(help_text='The question the voter is answering.', max_length=254)),
                ('method', models.CharField(choices=[('yesno', 'Yes/no'), ('stv', 'Single transferable vote'), ('condorcet', 'Condorcet'), ('freeform', 'Free-form answer')], max_length=16)),
                ('details', models.TextField(blank=True, help_text='This text, if any, is displayed next to the question.')),
                ('election', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='voting.Election')),
            ],
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=254)),
                ('slug', models.SlugField(db_index=False)),
                ('release_date', models.DateField()),
                ('msgid', voting.models.MessageIDField(help_text='The Message-ID of the published statement.', max_length=250, verbose_name='Message-ID')),
                ('statement', models.TextField(editable=False)),
            ],
            options={
                'ordering': ('-release_date',),
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='voting.Choice')),
            ],
        ),
        migrations.CreateModel(
            name='Voter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(help_text='The address the ballot key was emailed to.', max_length=254)),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='The date/time this voter first requested a ballot key for this election.')),
                ('vote_date', models.DateTimeField(blank=True, help_text='The date/time of the most recent vote submitted by this voter for this election.', null=True)),
                ('name', models.CharField(blank=True, help_text="The voter's 'name', as supplied by them.", max_length=128)),
                ('posting_address', models.CharField(blank=True, help_text="The voter's 'usual posting address', as supplied by them.", max_length=128)),
                ('comments', models.TextField(blank=True, help_text='Any additional comments added by the voter.')),
                ('accepted', models.BooleanField(default=False, help_text='Tick to accept the vote.')),
                ('notes', models.TextField(blank=True, help_text='Private notes by the votetaker.')),
                ('email_headers', models.TextField(help_text='The headers of the first email received requesting a ballot key.')),
                ('election', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='voting.Election')),
            ],
        ),
        migrations.CreateModel(
            name='VoterIPAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(db_index=True, unpack_ipv4=True, verbose_name='IP address')),
                ('fingerprint', models.CharField(db_index=True, max_length=128)),
                ('headers', models.TextField(verbose_name='HTTP headers')),
                ('asn_info', models.CharField(db_index=True, max_length=250, verbose_name='AS info')),
                ('browser_info', models.TextField()),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='voting.Voter')),
            ],
        ),
        migrations.CreateModel(
            name='Votetaker',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('role', models.CharField(blank=True, help_text="The votetaker's 'job title', if any.", max_length=128)),
                ('public_email', models.EmailField(blank=True, help_text='If specified, this is the email address that will be displayed on public pages. Otherwise, the django User email address will be used.', max_length=254)),
                ('contact', models.TextField(blank=True, help_text='Private contact details for the votetaker. These will never be displayed on any public pages.')),
                ('pgpkey', models.TextField(blank=True, help_text='The PGP public key block for the votetaker. If provided, it will be displayed on the public pages.', verbose_name='PGP Key')),
            ],
        ),
        migrations.AddField(
            model_name='vote',
            name='voter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='voting.Voter'),
        ),
        migrations.AlterUniqueTogether(
            name='statement',
            unique_together=set([('release_date', 'slug')]),
        ),
        migrations.AddField(
            model_name='election',
            name='secondary',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='secondary_election_set', to='voting.Votetaker'),
        ),
        migrations.AddField(
            model_name='election',
            name='votetaker',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='voting.Votetaker'),
        ),
        migrations.AddField(
            model_name='choice',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='voting.Question'),
        ),
        migrations.AlterUniqueTogether(
            name='voter',
            unique_together=set([('election', 'email')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='question',
            order_with_respect_to='election',
        ),
        migrations.AlterIndexTogether(
            name='election',
            index_together=set([('status', 'result_date')]),
        ),
    ]
